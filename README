# Load Balancer on single machine

Basic setup to use iptables for load balancing across machines.
Assumes vagrant is working withe qemu provider.

1. Start two containers
docker run -it --rm --name web1 nginx
docker run -it --rm --name web2 nginx

2. Get IP address of those containers. Say 172.17.0.3 and 172.17.0.3
3. Decide a cluster IP address to be assigned to the service.
4. Setup iptable route rules with clusterIP address forwarding the requests to container ip address.

export FRONT_IP=192.168.10.10
export BACKEND2_IP=172.17.0.3
export BACKEND1_IP=172.17.0.2

iptables -t nat -A OUTPUT -p tcp --dport 80 -d $FRONT_IP -m statistic \
--mode random --probability 0.5 -j DNAT --to-destination $BACKEND1_IP:80

iptables -t nat -A OUTPUT -p tcp --dport 80 -d $FRONT_IP \
-j DNAT --to-destination $BACKEND2_IP:80

# Load Balancer on two machines

# Two-Node Docker Load Balancing with VXLAN

This setup demonstrates Docker container load balancing across two nodes using VXLAN for container networking and iptables for load balancing.

## Prerequisites
- Vagrant with QEMU provider
- At least 4GB RAM available
- ARM64 architecture (using perk/ubuntu-2204-arm64 box)

## Quick Start

1. Clone this repository and start the VMs:
vagrant up
2. SSH into the nodes in separate terminals:
vagrant ssh node1
vagrant ssh node2
## Setup Steps

### 1. Set up VXLAN

On node1:
Create VXLAN interface
sudo ip link add vxlan0 type vxlan \
id 100 \
local 192.168.56.10 \
remote 192.168.56.11 \
dev eth1 \
dstport 4789
Configure VXLAN interface
sudo ip link set vxlan0 up
sudo ip addr add 10.0.0.1/24 dev vxlan0

On node2:
Create VXLAN interface
sudo ip link add vxlan0 type vxlan \
id 100 \
local 192.168.56.11 \
remote 192.168.56.10 \
dev eth1 \
dstport 4789
Configure VXLAN interface
sudo ip link set vxlan0 up
sudo ip addr add 10.0.0.2/24 dev vxlan0

### 2. Create Docker Networks
On node1:
Create Docker network
sudo docker network create --driver=bridge \
--subnet=10.0.0.0/24 \
--ip-range=10.0.0.0/25 \
--aux-address="host=10.0.0.1" \
-o "com.docker.network.bridge.name=docker_vxlan" \
vxlan_net
Connect bridge to VXLAN
sudo ip link set docker_vxlan master vxlan0

On node2:
Create Docker network
sudo docker network create --driver=bridge \
--subnet=10.0.0.0/24 \
--ip-range=10.0.0.128/25 \
--aux-address="host=10.0.0.2" \
-o "com.docker.network.bridge.name=docker_vxlan" \
vxlan_net
Connect bridge to VXLAN
sudo ip link set docker_vxlan master vxlan0

### 3. Launch Nginx Containers
On node1:
Start nginx container
sudo docker run -d --name web1 --network vxlan_net nginx
Add test content
docker exec web1 sh -c 'echo "Hello from Web1" > /usr/share/nginx/html/index.html'

On node2:
Start nginx container
sudo docker run -d --name web2 --network vxlan_net nginx
Add test content
docker exec web2 sh -c 'echo "Hello from Web2" > /usr/share/nginx/html/index.html'

### 4. Configure Load Balancing

On node1:
export BACKEND1_IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' web1)
export BACKEND2_IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' web2)
export FRONT_IP=192.168.56.100

Add virtual IP
sudo ip addr add $FRONT_IP/32 dev eth1
Add iptables rules
sudo iptables -t nat -A OUTPUT -p tcp --dport 80 -d $FRONT_IP -m statistic \
--mode random --probability 0.5 -j DNAT --to-destination $BACKEND1_IP:80
sudo iptables -t nat -A OUTPUT -p tcp --dport 80 -d $FRONT_IP \
-j DNAT --to-destination $BACKEND2_IP:80
sudo iptables -t nat -A PREROUTING -p tcp --dport 80 -d $FRONT_IP -m statistic \
--mode random --probability 0.5 -j DNAT --to-destination $BACKEND1_IP:80
sudo iptables -t nat -A PREROUTING -p tcp --dport 80 -d $FRONT_IP \
-j DNAT --to-destination $BACKEND2_IP:80
sudo iptables -A FORWARD -j ACCEPT

## Testing

1. Test VXLAN connectivity:
From node1
ping 10.0.0.2
From node2
ping 10.0.0.1

2. Test load balancing:
From node1

for i in {1..10}; do curl http://192.168.56.100; done

ip -d link show vxlan0

docker network inspect vxlan_net

sudo iptables -t nat -L -n -v

sudo tcpdump -i eth1 'port 4789'



## Explanation with example
Let us explain IP addressing and CIDR notation using 10.0.0.1/24 as an example.
IP Address Format (10.0.0.1/24)
IP Address Part (10.0.0.1):
Made up of 4 octets (8 bits each): 10 | 0 | 0 | 1
In binary: 00001010.00000000.00000000.00000001
CIDR Suffix (/24):
The /24 means "use first 24 bits for network portion"
Leaves last 8 bits for host addresses (32-24 = 8 bits)
2^8 = 256 possible addresses (0-255)
Network Range for 10.0.0.1/24
Network Address: 10.0.0.0
First Usable:    10.0.0.1
Last Usable:     10.0.0.254
Broadcast:       10.0.0.255
Subnet Mask:     255.255.255.0

In our VXLAN setup:
# On node1
sudo ip addr add 10.0.0.1/24 dev vxlan0
# This means:
# - VXLAN interface can communicate with addresses 10.0.0.0 through 10.0.0.255
# - Node1 gets 10.0.0.1 as its VXLAN interface address

# On node2
sudo ip addr add 10.0.0.2/24 dev vxlan0
# This means:
# - Same network range (10.0.0.0/24)
# - Node2 gets 10.0.0.2 as its VXLAN interface address

Docker Network Splitting
In our setup, we split this /24 network between the two nodes:
# Node1 Docker network
--subnet=10.0.0.0/24      # Full network range
--ip-range=10.0.0.0/25    # First half (0-127)
# This means containers on node1 get IPs from 10.0.0.1 to 10.0.0.127

# Node2 Docker network
--subnet=10.0.0.0/24      # Full network range
--ip-range=10.0.0.128/25  # Second half (128-255)
# This means containers on node2 get IPs from 10.0.0.128 to 10.0.0.254

Visual Representation:
10.0.0.0/24 Network Layout:
+------------------------------------------------------------------------------+
|                                  10.0.0.0/24                                  |
+------------------------------------------------------------------------------+
|           Node1 Range           |              Node2 Range                    |
|          10.0.0.0/25           |             10.0.0.128/25                   |
| 10.0.0.1 - 10.0.0.127         |          10.0.0.128 - 10.0.0.254           |
+------------------------------------------------------------------------------+
↑               ↑                 ↑                    ↑                        ↑
|               |                 |                    |                        |
Network    Node1 VXLAN      Middle of       Node2 VXLAN                  Broadcast
Address    (10.0.0.1)       Network         (10.0.0.2)                   Address

Key Points:
/24 gives us 256 addresses (10.0.0.0 - 10.0.0.255)
We split this into two /25 networks (128 addresses each)
Node1 uses first half (0-127)
Node2 uses second half (128-255)
VXLAN interfaces (10.0.0.1 and 10.0.0.2) can communicate with all addresses in the range
This setup ensures:
No IP conflicts between containers on different nodes
Clear IP range allocation
Full connectivity across the VXLAN network